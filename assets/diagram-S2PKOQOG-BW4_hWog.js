var g;import"./_Uint8Array-D5Z9rM2X.js";import"./isSymbol-xTSywenE.js";import"./_arrayMap-DQI2GUNb.js";import"./toString-CBnct2wx.js";import"./toNumber-CTOPJrpu.js";import"./toInteger-Bor4StOs.js";import"./isArrayLikeObject-DKyJYtr8.js";import"./_getTag-CVRrQL_Q.js";import"./_baseUniq-YWmHDCnr.js";import"./_baseIsEqual-BF8660ot.js";import"./chunk-4KMFLZZN-ByJDCN5Q.js";import"./_toKey-Di_xoXjD.js";import"./memoize-CAcr7Wct.js";import"./get-BYzWDFJH.js";import"./_baseFlatten-8yEsQJi9.js";import"./_basePickBy-W59-WIft.js";import"./merge-BgA7kxZb.js";import"./_baseSlice-B27Cqkm6.js";import"./_arrayReduce-DDpPg0Qh.js";import"./clone-CgXpsEJc.js";import"./_baseEach-Xz5DR2cc.js";import"./hasIn-WaG0qjy7.js";import"./_baseProperty-CIKnF2iY.js";import"./_createAggregator-DL8RwNg0.js";import"./min-hz9WUEOx.js";import"./_baseMap-DMMHaI20.js";import"./isEmpty-z92iM7uZ.js";import"./_baseSet-BlAtwuhp.js";import"./preload-helper-BpItL31i.js";import"./main-CD7jouuS.js";import"./purify.es-D83HMRRD.js";import"./timer-9ePNNBwU.js";import"./src-D-O4qgKm.js";import"./math-Cpuq8NJh.js";import"./step-DCnHyPDa.js";import{i as u}from"./chunk-S3R3BYOJ-uZNU-Kd7.js";import{n as f,r as y}from"./src-Ci62OB0C.js";import{B as C,C as v,U as P,_ as z,a as S,c as E,d as F,v as T,y as W,z as D}from"./chunk-ABZYJK2D-D-T6tPym.js";import{t as A}from"./chunk-EXTU4WIE-DwsJ54Id.js";import"./dist-D3R7S_yk.js";import"./chunk-JEIROHC2-CdhV7PKh.js";import"./chunk-BN7GFLIU-BYSfwhAl.js";import"./chunk-T44TD3VJ-C-v8PEdO.js";import"./chunk-KMC2YHZD-CqzrHQLs.js";import"./chunk-WFWHJNB7-BUr8j7nr.js";import"./chunk-WFRQ32O7-BDpPnmW5.js";import"./chunk-XRWGC2XP-B3B1fnQJ.js";import{t as R}from"./chunk-4BX2VUAB-BDDhRllH.js";import{t as Y}from"./mermaid-parser.core-DX_Wqjrp.js";var _=F.packet,w=(g=class{constructor(){this.packet=[],this.setAccTitle=C,this.getAccTitle=T,this.setDiagramTitle=P,this.getDiagramTitle=v,this.getAccDescription=z,this.setAccDescription=D}getConfig(){let t=u({..._,...W().packet});return t.showBits&&(t.paddingY+=10),t}getPacket(){return this.packet}pushWord(t){t.length>0&&this.packet.push(t)}clear(){S(),this.packet=[]}},f(g,"PacketDB"),g),H=1e4,L=f((r,t)=>{R(r,t);let i=-1,a=[],l=1,{bitsPerRow:p}=t.getConfig();for(let{start:e,end:s,bits:d,label:n}of r.blocks){if(e!==void 0&&s!==void 0&&s<e)throw Error(`Packet block ${e} - ${s} is invalid. End must be greater than start.`);if(e??(e=i+1),e!==i+1)throw Error(`Packet block ${e} - ${s??e} is not contiguous. It should start from ${i+1}.`);if(d===0)throw Error(`Packet block ${e} is invalid. Cannot have a zero bit field.`);for(s??(s=e+(d??1)-1),d??(d=s-e+1),i=s,y.debug(`Packet block ${e} - ${i} with label ${n}`);a.length<=p+1&&t.getPacket().length<H;){let[c,o]=M({start:e,end:s,bits:d,label:n},l,p);if(a.push(c),c.end+1===l*p&&(t.pushWord(a),a=[],l++),!o)break;({start:e,end:s,bits:d,label:n}=o)}}t.pushWord(a)},"populate"),M=f((r,t,i)=>{if(r.start===void 0)throw Error("start should have been set during first phase");if(r.end===void 0)throw Error("end should have been set during first phase");if(r.start>r.end)throw Error(`Block start ${r.start} is greater than block end ${r.end}.`);if(r.end+1<=t*i)return[r,void 0];let a=t*i-1,l=t*i;return[{start:r.start,end:a,label:r.label,bits:a-r.start},{start:l,end:r.end,label:r.label,bits:r.end-l}]},"getNextFittingBlock"),x={parser:{yy:void 0},parse:f(async r=>{var a;let t=await Y("packet",r),i=(a=x.parser)==null?void 0:a.yy;if(!(i instanceof w))throw Error("parser.parser?.yy was not a PacketDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.");y.debug(t),L(t,i)},"parse")},j=f((r,t,i,a)=>{let l=a.db,p=l.getConfig(),{rowHeight:e,paddingY:s,bitWidth:d,bitsPerRow:n}=p,c=l.getPacket(),o=l.getDiagramTitle(),h=e+s,m=h*(c.length+1)-(o?0:e),b=d*n+2,k=A(t);k.attr("viewbox",`0 0 ${b} ${m}`),E(k,m,b,p.useMaxWidth);for(let[$,B]of c.entries())I(k,B,$,p);k.append("text").text(o).attr("x",b/2).attr("y",m-h/2).attr("dominant-baseline","middle").attr("text-anchor","middle").attr("class","packetTitle")},"draw"),I=f((r,t,i,{rowHeight:a,paddingX:l,paddingY:p,bitWidth:e,bitsPerRow:s,showBits:d})=>{let n=r.append("g"),c=i*(a+p)+p;for(let o of t){let h=o.start%s*e+1,m=(o.end-o.start+1)*e-l;if(n.append("rect").attr("x",h).attr("y",c).attr("width",m).attr("height",a).attr("class","packetBlock"),n.append("text").attr("x",h+m/2).attr("y",c+a/2).attr("class","packetLabel").attr("dominant-baseline","middle").attr("text-anchor","middle").text(o.label),!d)continue;let b=o.end===o.start,k=c-2;n.append("text").attr("x",h+(b?m/2:0)).attr("y",k).attr("class","packetByte start").attr("dominant-baseline","auto").attr("text-anchor",b?"middle":"start").text(o.start),b||n.append("text").attr("x",h+m).attr("y",k).attr("class","packetByte end").attr("dominant-baseline","auto").attr("text-anchor","end").text(o.end)}},"drawWord"),N={draw:j},U={byteFontSize:"10px",startByteColor:"black",endByteColor:"black",labelColor:"black",labelFontSize:"12px",titleColor:"black",titleFontSize:"14px",blockStrokeColor:"black",blockStrokeWidth:"1",blockFillColor:"#efefef"},X={parser:x,get db(){return new w},renderer:N,styles:f(({packet:r}={})=>{let t=u(U,r);return`
	.packetByte {
		font-size: ${t.byteFontSize};
	}
	.packetByte.start {
		fill: ${t.startByteColor};
	}
	.packetByte.end {
		fill: ${t.endByteColor};
	}
	.packetLabel {
		fill: ${t.labelColor};
		font-size: ${t.labelFontSize};
	}
	.packetTitle {
		fill: ${t.titleColor};
		font-size: ${t.titleFontSize};
	}
	.packetBlock {
		stroke: ${t.blockStrokeColor};
		stroke-width: ${t.blockStrokeWidth};
		fill: ${t.blockFillColor};
	}
	`},"styles")};export{X as diagram};
