var J;import"./_Uint8Array-D5Z9rM2X.js";import"./isSymbol-xTSywenE.js";import"./_arrayMap-DQI2GUNb.js";import"./toString-CBnct2wx.js";import"./toNumber-CTOPJrpu.js";import"./toInteger-Bor4StOs.js";import"./isArrayLikeObject-DKyJYtr8.js";import"./_getTag-CVRrQL_Q.js";import"./_baseUniq-YWmHDCnr.js";import"./_baseIsEqual-BF8660ot.js";import"./chunk-4KMFLZZN-ByJDCN5Q.js";import"./_toKey-Di_xoXjD.js";import"./memoize-CAcr7Wct.js";import"./get-BYzWDFJH.js";import"./_baseFlatten-8yEsQJi9.js";import"./_basePickBy-W59-WIft.js";import"./merge-BgA7kxZb.js";import"./_baseSlice-B27Cqkm6.js";import"./_arrayReduce-DDpPg0Qh.js";import"./clone-CgXpsEJc.js";import"./_baseEach-Xz5DR2cc.js";import"./hasIn-WaG0qjy7.js";import"./_baseProperty-CIKnF2iY.js";import"./_createAggregator-DL8RwNg0.js";import"./min-hz9WUEOx.js";import"./_baseMap-DMMHaI20.js";import"./isEmpty-z92iM7uZ.js";import"./_baseSet-BlAtwuhp.js";import"./preload-helper-BpItL31i.js";import"./main-CD7jouuS.js";import"./purify.es-D83HMRRD.js";import"./timer-9ePNNBwU.js";import{u as Q}from"./src-D-O4qgKm.js";import"./math-Cpuq8NJh.js";import"./step-DCnHyPDa.js";import{g as X,i as Z,m as tt}from"./chunk-S3R3BYOJ-uZNU-Kd7.js";import{n as d,r as u}from"./src-Ci62OB0C.js";import{B as rt,C as et,K as at,U as ot,_ as it,a as st,b as ct,d as nt,s as k,v as mt,y as dt,z as ht}from"./chunk-ABZYJK2D-D-T6tPym.js";import"./dist-D3R7S_yk.js";import"./chunk-JEIROHC2-CdhV7PKh.js";import"./chunk-BN7GFLIU-BYSfwhAl.js";import"./chunk-T44TD3VJ-C-v8PEdO.js";import"./chunk-KMC2YHZD-CqzrHQLs.js";import"./chunk-WFWHJNB7-BUr8j7nr.js";import"./chunk-WFRQ32O7-BDpPnmW5.js";import"./chunk-XRWGC2XP-B3B1fnQJ.js";import{t as lt}from"./chunk-4BX2VUAB-BDDhRllH.js";import{t as $t}from"./mermaid-parser.core-DX_Wqjrp.js";import{t as pt}from"./chunk-QZHKN3VN-BtgXTIGW.js";var g={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},yt=nt.gitGraph,A=d(()=>Z({...yt,...dt().gitGraph}),"getConfig"),n=new pt(()=>{let r=A(),t=r.mainBranchName,a=r.mainBranchOrder;return{mainBranchName:t,commits:new Map,head:null,branchConfig:new Map([[t,{name:t,order:a}]]),branches:new Map([[t,null]]),currBranch:t,direction:"LR",seq:0,options:{}}});function z(){return tt({length:7})}d(z,"getID");function j(r,t){let a=Object.create(null);return r.reduce((i,e)=>{let o=t(e);return a[o]||(a[o]=!0,i.push(e)),i},[])}d(j,"uniqBy");var gt=d(function(r){n.records.direction=r},"setDirection"),xt=d(function(r){u.debug("options str",r),r=r==null?void 0:r.trim(),r||(r="{}");try{n.records.options=JSON.parse(r)}catch(t){u.error("error while parsing gitGraph options",t.message)}},"setOptions"),ft=d(function(){return n.records.options},"getOptions"),ut=d(function(r){let t=r.msg,a=r.id,i=r.type,e=r.tags;u.info("commit",t,a,i,e),u.debug("Entering commit:",t,a,i,e);let o=A();a=k.sanitizeText(a,o),t=k.sanitizeText(t,o),e=e==null?void 0:e.map(s=>k.sanitizeText(s,o));let c={id:a||n.records.seq+"-"+z(),message:t,seq:n.records.seq++,type:i??g.NORMAL,tags:e??[],parents:n.records.head==null?[]:[n.records.head.id],branch:n.records.currBranch};n.records.head=c,u.info("main branch",o.mainBranchName),n.records.commits.has(c.id)&&u.warn(`Commit ID ${c.id} already exists`),n.records.commits.set(c.id,c),n.records.branches.set(n.records.currBranch,c.id),u.debug("in pushCommit "+c.id)},"commit"),bt=d(function(r){let t=r.name,a=r.order;if(t=k.sanitizeText(t,A()),n.records.branches.has(t))throw Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);n.records.branches.set(t,n.records.head==null?null:n.records.head.id),n.records.branchConfig.set(t,{name:t,order:a}),_(t),u.debug("in createBranch")},"branch"),wt=d(r=>{let t=r.branch,a=r.id,i=r.type,e=r.tags,o=A();t=k.sanitizeText(t,o),a&&(a=k.sanitizeText(a,o));let c=n.records.branches.get(n.records.currBranch),s=n.records.branches.get(t),h=c?n.records.commits.get(c):void 0,$=s?n.records.commits.get(s):void 0;if(h&&$&&h.branch===t)throw Error(`Cannot merge branch '${t}' into itself.`);if(n.records.currBranch===t){let m=Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw m.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},m}if(h===void 0||!h){let m=Error(`Incorrect usage of "merge". Current branch (${n.records.currBranch})has no commits`);throw m.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["commit"]},m}if(!n.records.branches.has(t)){let m=Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");throw m.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},m}if($===void 0||!$){let m=Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");throw m.hash={text:`merge ${t}`,token:`merge ${t}`,expected:['"commit"']},m}if(h===$){let m=Error('Incorrect usage of "merge". Both branches have same head');throw m.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},m}if(a&&n.records.commits.has(a)){let m=Error('Incorrect usage of "merge". Commit with id:'+a+" already exists, use different custom id");throw m.hash={text:`merge ${t} ${a} ${i} ${e==null?void 0:e.join(" ")}`,token:`merge ${t} ${a} ${i} ${e==null?void 0:e.join(" ")}`,expected:[`merge ${t} ${a}_UNIQUE ${i} ${e==null?void 0:e.join(" ")}`]},m}let l=s||"",p={id:a||`${n.records.seq}-${z()}`,message:`merged branch ${t} into ${n.records.currBranch}`,seq:n.records.seq++,parents:n.records.head==null?[]:[n.records.head.id,l],branch:n.records.currBranch,type:g.MERGE,customType:i,customId:!!a,tags:e??[]};n.records.head=p,n.records.commits.set(p.id,p),n.records.branches.set(n.records.currBranch,p.id),u.debug(n.records.branches),u.debug("in mergeBranch")},"merge"),Bt=d(function(r){let t=r.id,a=r.targetId,i=r.tags,e=r.parent;u.debug("Entering cherryPick:",t,a,i);let o=A();if(t=k.sanitizeText(t,o),a=k.sanitizeText(a,o),i=i==null?void 0:i.map(h=>k.sanitizeText(h,o)),e=k.sanitizeText(e,o),!t||!n.records.commits.has(t)){let h=Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw h.hash={text:`cherryPick ${t} ${a}`,token:`cherryPick ${t} ${a}`,expected:["cherry-pick abc"]},h}let c=n.records.commits.get(t);if(c===void 0||!c)throw Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(e&&!(Array.isArray(c.parents)&&c.parents.includes(e)))throw Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let s=c.branch;if(c.type===g.MERGE&&!e)throw Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!a||!n.records.commits.has(a)){if(s===n.records.currBranch){let p=Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw p.hash={text:`cherryPick ${t} ${a}`,token:`cherryPick ${t} ${a}`,expected:["cherry-pick abc"]},p}let h=n.records.branches.get(n.records.currBranch);if(h===void 0||!h){let p=Error(`Incorrect usage of "cherry-pick". Current branch (${n.records.currBranch})has no commits`);throw p.hash={text:`cherryPick ${t} ${a}`,token:`cherryPick ${t} ${a}`,expected:["cherry-pick abc"]},p}let $=n.records.commits.get(h);if($===void 0||!$){let p=Error(`Incorrect usage of "cherry-pick". Current branch (${n.records.currBranch})has no commits`);throw p.hash={text:`cherryPick ${t} ${a}`,token:`cherryPick ${t} ${a}`,expected:["cherry-pick abc"]},p}let l={id:n.records.seq+"-"+z(),message:`cherry-picked ${c==null?void 0:c.message} into ${n.records.currBranch}`,seq:n.records.seq++,parents:n.records.head==null?[]:[n.records.head.id,c.id],branch:n.records.currBranch,type:g.CHERRY_PICK,tags:i?i.filter(Boolean):[`cherry-pick:${c.id}${c.type===g.MERGE?`|parent:${e}`:""}`]};n.records.head=l,n.records.commits.set(l.id,l),n.records.branches.set(n.records.currBranch,l.id),u.debug(n.records.branches),u.debug("in cherryPick")}},"cherryPick"),_=d(function(r){if(r=k.sanitizeText(r,A()),n.records.branches.has(r)){n.records.currBranch=r;let t=n.records.branches.get(n.records.currBranch);t===void 0||!t?n.records.head=null:n.records.head=n.records.commits.get(t)??null}else{let t=Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${r}")`);throw t.hash={text:`checkout ${r}`,token:`checkout ${r}`,expected:[`branch ${r}`]},t}},"checkout");function D(r,t,a){let i=r.indexOf(t);i===-1?r.push(a):r.splice(i,1,a)}d(D,"upsert");function N(r){let t=r.reduce((e,o)=>e.seq>o.seq?e:o,r[0]),a="";r.forEach(function(e){e===t?a+="	*":a+="	|"});let i=[a,t.id,t.seq];for(let e in n.records.branches)n.records.branches.get(e)===t.id&&i.push(e);if(u.debug(i.join(" ")),t.parents&&t.parents.length==2&&t.parents[0]&&t.parents[1]){let e=n.records.commits.get(t.parents[0]);D(r,t,e),t.parents[1]&&r.push(n.records.commits.get(t.parents[1]))}else{if(t.parents.length==0)return;if(t.parents[0]){let e=n.records.commits.get(t.parents[0]);D(r,t,e)}}r=j(r,e=>e.id),N(r)}d(N,"prettyPrintCommitHistory");var Et=d(function(){u.debug(n.records.commits);let r=K()[0];N([r])},"prettyPrint"),Ct=d(function(){n.reset(),st()},"clear"),kt=d(function(){return[...n.records.branchConfig.values()].map((r,t)=>r.order!==null&&r.order!==void 0?r:{...r,order:parseFloat(`0.${t}`)}).sort((r,t)=>(r.order??0)-(t.order??0)).map(({name:r})=>({name:r}))},"getBranchesAsObjArray"),Lt=d(function(){return n.records.branches},"getBranches"),Tt=d(function(){return n.records.commits},"getCommits"),K=d(function(){let r=[...n.records.commits.values()];return r.forEach(function(t){u.debug(t.id)}),r.sort((t,a)=>t.seq-a.seq),r},"getCommitsArray"),F={commitType:g,getConfig:A,setDirection:gt,setOptions:xt,getOptions:ft,commit:ut,branch:bt,merge:wt,cherryPick:Bt,checkout:_,prettyPrint:Et,clear:Ct,getBranchesAsObjArray:kt,getBranches:Lt,getCommits:Tt,getCommitsArray:K,getCurrentBranch:d(function(){return n.records.currBranch},"getCurrentBranch"),getDirection:d(function(){return n.records.direction},"getDirection"),getHead:d(function(){return n.records.head},"getHead"),setAccTitle:rt,getAccTitle:mt,getAccDescription:it,setAccDescription:ht,setDiagramTitle:ot,getDiagramTitle:et},Mt=d((r,t)=>{lt(r,t),r.dir&&t.setDirection(r.dir);for(let a of r.statements)vt(a,t)},"populate"),vt=d((r,t)=>{let a={Commit:d(i=>t.commit(Pt(i)),"Commit"),Branch:d(i=>t.branch(Rt(i)),"Branch"),Merge:d(i=>t.merge(At(i)),"Merge"),Checkout:d(i=>t.checkout(Gt(i)),"Checkout"),CherryPicking:d(i=>t.cherryPick(Ot(i)),"CherryPicking")}[r.$type];a?a(r):u.error(`Unknown statement type: ${r.$type}`)},"parseStatement"),Pt=d(r=>({id:r.id,msg:r.message??"",type:r.type===void 0?g.NORMAL:g[r.type],tags:r.tags??void 0}),"parseCommit"),Rt=d(r=>({name:r.name,order:r.order??0}),"parseBranch"),At=d(r=>({branch:r.branch,id:r.id??"",type:r.type===void 0?void 0:g[r.type],tags:r.tags??void 0}),"parseMerge"),Gt=d(r=>r.branch,"parseCheckout"),Ot=d(r=>{var t;return{id:r.id,targetId:"",tags:((t=r.tags)==null?void 0:t.length)===0?void 0:r.tags,parent:r.parent}},"parseCherryPicking"),It={parse:d(async r=>{let t=await $t("gitGraph",r);u.debug(t),Mt(t,F)},"parse")},f=(J=ct())==null?void 0:J.gitGraph,v=10,P=40,L=4,T=2,G=8,E=new Map,C=new Map,H=30,I=new Map,S=[],R=0,y="LR",qt=d(()=>{E.clear(),C.clear(),I.clear(),R=0,S=[],y="LR"},"clear"),Y=d(r=>{let t=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof r=="string"?r.split(/\\n|\n|<br\s*\/?>/gi):r).forEach(a=>{let i=document.createElementNS("http://www.w3.org/2000/svg","tspan");i.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),i.setAttribute("dy","1em"),i.setAttribute("x","0"),i.setAttribute("class","row"),i.textContent=a.trim(),t.appendChild(i)}),t},"drawText"),U=d(r=>{let t,a,i;return y==="BT"?(a=d((e,o)=>e<=o,"comparisonFunc"),i=1/0):(a=d((e,o)=>e>=o,"comparisonFunc"),i=0),r.forEach(e=>{var c,s;let o=y==="TB"||y=="BT"?(c=C.get(e))==null?void 0:c.y:(s=C.get(e))==null?void 0:s.x;o!==void 0&&a(o,i)&&(t=e,i=o)}),t},"findClosestParent"),zt=d(r=>{let t="",a=1/0;return r.forEach(i=>{let e=C.get(i).y;e<=a&&(t=i,a=e)}),t||void 0},"findClosestParentBT"),Ht=d((r,t,a)=>{let i=a,e=a,o=[];r.forEach(c=>{let s=t.get(c);if(!s)throw Error(`Commit not found for key ${c}`);s.parents.length?(i=Dt(s),e=Math.max(i,e)):o.push(s),Nt(s,i)}),i=e,o.forEach(c=>{Wt(c,i,a)}),r.forEach(c=>{let s=t.get(c);if(s!=null&&s.parents.length){let h=zt(s.parents);i=C.get(h).y-P,i<=e&&(e=i);let $=E.get(s.branch).pos,l=i-v;C.set(s.id,{x:$,y:l})}})},"setParallelBTPos"),St=d(r=>{var i;let t=U(r.parents.filter(e=>e!==null));if(!t)throw Error(`Closest parent not found for commit ${r.id}`);let a=(i=C.get(t))==null?void 0:i.y;if(a===void 0)throw Error(`Closest parent position not found for commit ${r.id}`);return a},"findClosestParentPos"),Dt=d(r=>St(r)+P,"calculateCommitPosition"),Nt=d((r,t)=>{let a=E.get(r.branch);if(!a)throw Error(`Branch not found for commit ${r.id}`);let i=a.pos,e=t+v;return C.set(r.id,{x:i,y:e}),{x:i,y:e}},"setCommitPosition"),Wt=d((r,t,a)=>{let i=E.get(r.branch);if(!i)throw Error(`Branch not found for commit ${r.id}`);let e=t+a,o=i.pos;C.set(r.id,{x:o,y:e})},"setRootPosition"),jt=d((r,t,a,i,e,o)=>{if(o===g.HIGHLIGHT)r.append("rect").attr("x",a.x-10).attr("y",a.y-10).attr("width",20).attr("height",20).attr("class",`commit ${t.id} commit-highlight${e%G} ${i}-outer`),r.append("rect").attr("x",a.x-6).attr("y",a.y-6).attr("width",12).attr("height",12).attr("class",`commit ${t.id} commit${e%G} ${i}-inner`);else if(o===g.CHERRY_PICK)r.append("circle").attr("cx",a.x).attr("cy",a.y).attr("r",10).attr("class",`commit ${t.id} ${i}`),r.append("circle").attr("cx",a.x-3).attr("cy",a.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${i}`),r.append("circle").attr("cx",a.x+3).attr("cy",a.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${i}`),r.append("line").attr("x1",a.x+3).attr("y1",a.y+1).attr("x2",a.x).attr("y2",a.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${i}`),r.append("line").attr("x1",a.x-3).attr("y1",a.y+1).attr("x2",a.x).attr("y2",a.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${i}`);else{let c=r.append("circle");if(c.attr("cx",a.x),c.attr("cy",a.y),c.attr("r",t.type===g.MERGE?9:10),c.attr("class",`commit ${t.id} commit${e%G}`),o===g.MERGE){let s=r.append("circle");s.attr("cx",a.x),s.attr("cy",a.y),s.attr("r",6),s.attr("class",`commit ${i} ${t.id} commit${e%G}`)}o===g.REVERSE&&r.append("path").attr("d",`M ${a.x-5},${a.y-5}L${a.x+5},${a.y+5}M${a.x-5},${a.y+5}L${a.x+5},${a.y-5}`).attr("class",`commit ${i} ${t.id} commit${e%G}`)}},"drawCommitBullet"),_t=d((r,t,a,i)=>{var e;if(t.type!==g.CHERRY_PICK&&(t.customId&&t.type===g.MERGE||t.type!==g.MERGE)&&(f!=null&&f.showCommitLabel)){let o=r.append("g"),c=o.insert("rect").attr("class","commit-label-bkg"),s=o.append("text").attr("x",i).attr("y",a.y+25).attr("class","commit-label").text(t.id),h=(e=s.node())==null?void 0:e.getBBox();if(h&&(c.attr("x",a.posWithOffset-h.width/2-T).attr("y",a.y+13.5).attr("width",h.width+2*T).attr("height",h.height+2*T),y==="TB"||y==="BT"?(c.attr("x",a.x-(h.width+4*L+5)).attr("y",a.y-12),s.attr("x",a.x-(h.width+4*L)).attr("y",a.y+h.height-12)):s.attr("x",a.posWithOffset-h.width/2),f.rotateCommitLabel))if(y==="TB"||y==="BT")s.attr("transform","rotate(-45, "+a.x+", "+a.y+")"),c.attr("transform","rotate(-45, "+a.x+", "+a.y+")");else{let $=-7.5-(h.width+10)/25*9.5,l=10+h.width/25*8.5;o.attr("transform","translate("+$+", "+l+") rotate(-45, "+i+", "+a.y+")")}}},"drawCommitLabel"),Kt=d((r,t,a,i)=>{var e;if(t.tags.length>0){let o=0,c=0,s=0,h=[];for(let $ of t.tags.reverse()){let l=r.insert("polygon"),p=r.append("circle"),m=r.append("text").attr("y",a.y-16-o).attr("class","tag-label").text($),x=(e=m.node())==null?void 0:e.getBBox();if(!x)throw Error("Tag bbox not found");c=Math.max(c,x.width),s=Math.max(s,x.height),m.attr("x",a.posWithOffset-x.width/2),h.push({tag:m,hole:p,rect:l,yOffset:o}),o+=20}for(let{tag:$,hole:l,rect:p,yOffset:m}of h){let x=s/2,b=a.y-19.2-m;if(p.attr("class","tag-label-bkg").attr("points",`
      ${i-c/2-L/2},${b+T}  
      ${i-c/2-L/2},${b-T}
      ${a.posWithOffset-c/2-L},${b-x-T}
      ${a.posWithOffset+c/2+L},${b-x-T}
      ${a.posWithOffset+c/2+L},${b+x+T}
      ${a.posWithOffset-c/2-L},${b+x+T}`),l.attr("cy",b).attr("cx",i-c/2+L/2).attr("r",1.5).attr("class","tag-hole"),y==="TB"||y==="BT"){let w=i+m;p.attr("class","tag-label-bkg").attr("points",`
        ${a.x},${w+2}
        ${a.x},${w-2}
        ${a.x+v},${w-x-2}
        ${a.x+v+c+4},${w-x-2}
        ${a.x+v+c+4},${w+x+2}
        ${a.x+v},${w+x+2}`).attr("transform","translate(12,12) rotate(45, "+a.x+","+i+")"),l.attr("cx",a.x+L/2).attr("cy",w).attr("transform","translate(12,12) rotate(45, "+a.x+","+i+")"),$.attr("x",a.x+5).attr("y",w+3).attr("transform","translate(14,14) rotate(45, "+a.x+","+i+")")}}}},"drawCommitTags"),Ft=d(r=>{switch(r.customType??r.type){case g.NORMAL:return"commit-normal";case g.REVERSE:return"commit-reverse";case g.HIGHLIGHT:return"commit-highlight";case g.MERGE:return"commit-merge";case g.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Yt=d((r,t,a,i)=>{let e={x:0,y:0};if(r.parents.length>0){let o=U(r.parents);if(o){let c=i.get(o)??e;return t==="TB"?c.y+P:t==="BT"?(i.get(r.id)??e).y-P:c.x+P}}else return t==="TB"?H:t==="BT"?(i.get(r.id)??e).y-P:0;return 0},"calculatePosition"),Ut=d((r,t,a)=>{var c,s;let i=y==="BT"&&a?t:t+v,e=y==="TB"||y==="BT"?i:(c=E.get(r.branch))==null?void 0:c.pos,o=y==="TB"||y==="BT"?(s=E.get(r.branch))==null?void 0:s.pos:i;if(o===void 0||e===void 0)throw Error(`Position were undefined for commit ${r.id}`);return{x:o,y:e,posWithOffset:i}},"getCommitPosition"),V=d((r,t,a)=>{if(!f)throw Error("GitGraph config not found");let i=r.append("g").attr("class","commit-bullets"),e=r.append("g").attr("class","commit-labels"),o=y==="TB"||y==="BT"?H:0,c=[...t.keys()],s=(f==null?void 0:f.parallelCommits)??!1,h=d((l,p)=>{var b,w;let m=(b=t.get(l))==null?void 0:b.seq,x=(w=t.get(p))==null?void 0:w.seq;return m!==void 0&&x!==void 0?m-x:0},"sortKeys"),$=c.sort(h);y==="BT"&&(s&&Ht($,t,o),$=$.reverse()),$.forEach(l=>{var x;let p=t.get(l);if(!p)throw Error(`Commit not found for key ${l}`);s&&(o=Yt(p,y,o,C));let m=Ut(p,o,s);if(a){let b=Ft(p),w=p.customType??p.type;jt(i,p,m,b,((x=E.get(p.branch))==null?void 0:x.index)??0,w),_t(e,p,m,o),Kt(e,p,m,o)}y==="TB"||y==="BT"?C.set(p.id,{x:m.x,y:m.posWithOffset}):C.set(p.id,{x:m.posWithOffset,y:m.y}),o=y==="BT"&&s?o+P:o+P+v,o>R&&(R=o)})},"drawCommits"),Vt=d((r,t,a,i,e)=>{let o=(y==="TB"||y==="BT"?a.x<i.x:a.y<i.y)?t.branch:r.branch,c=d(h=>h.branch===o,"isOnBranchToGetCurve"),s=d(h=>h.seq>r.seq&&h.seq<t.seq,"isBetweenCommits");return[...e.values()].some(h=>s(h)&&c(h))},"shouldRerouteArrow"),q=d((r,t,a=0)=>{let i=r+Math.abs(r-t)/2;return a>5?i:S.every(e=>Math.abs(e-i)>=10)?(S.push(i),i):q(r,t-Math.abs(r-t)/5,a+1)},"findLane"),Jt=d((r,t,a,i)=>{var x,b,w,O,W;let e=C.get(t.id),o=C.get(a.id);if(e===void 0||o===void 0)throw Error(`Commit positions not found for commits ${t.id} and ${a.id}`);let c=Vt(t,a,e,o,i),s="",h="",$=0,l=0,p=(x=E.get(a.branch))==null?void 0:x.index;a.type===g.MERGE&&t.id!==a.parents[0]&&(p=(b=E.get(t.branch))==null?void 0:b.index);let m;if(c){s="A 10 10, 0, 0, 0,",h="A 10 10, 0, 0, 1,",$=10,l=10;let M=e.y<o.y?q(e.y,o.y):q(o.y,e.y),B=e.x<o.x?q(e.x,o.x):q(o.x,e.x);y==="TB"?e.x<o.x?m=`M ${e.x} ${e.y} L ${B-$} ${e.y} ${h} ${B} ${e.y+l} L ${B} ${o.y-$} ${s} ${B+l} ${o.y} L ${o.x} ${o.y}`:(p=(w=E.get(t.branch))==null?void 0:w.index,m=`M ${e.x} ${e.y} L ${B+$} ${e.y} ${s} ${B} ${e.y+l} L ${B} ${o.y-$} ${h} ${B-l} ${o.y} L ${o.x} ${o.y}`):y==="BT"?e.x<o.x?m=`M ${e.x} ${e.y} L ${B-$} ${e.y} ${s} ${B} ${e.y-l} L ${B} ${o.y+$} ${h} ${B+l} ${o.y} L ${o.x} ${o.y}`:(p=(O=E.get(t.branch))==null?void 0:O.index,m=`M ${e.x} ${e.y} L ${B+$} ${e.y} ${h} ${B} ${e.y-l} L ${B} ${o.y+$} ${s} ${B-l} ${o.y} L ${o.x} ${o.y}`):e.y<o.y?m=`M ${e.x} ${e.y} L ${e.x} ${M-$} ${s} ${e.x+l} ${M} L ${o.x-$} ${M} ${h} ${o.x} ${M+l} L ${o.x} ${o.y}`:(p=(W=E.get(t.branch))==null?void 0:W.index,m=`M ${e.x} ${e.y} L ${e.x} ${M+$} ${h} ${e.x+l} ${M} L ${o.x-$} ${M} ${s} ${o.x} ${M-l} L ${o.x} ${o.y}`)}else s="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",$=20,l=20,y==="TB"?(e.x<o.x&&(m=a.type===g.MERGE&&t.id!==a.parents[0]?`M ${e.x} ${e.y} L ${e.x} ${o.y-$} ${s} ${e.x+l} ${o.y} L ${o.x} ${o.y}`:`M ${e.x} ${e.y} L ${o.x-$} ${e.y} ${h} ${o.x} ${e.y+l} L ${o.x} ${o.y}`),e.x>o.x&&(s="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",$=20,l=20,m=a.type===g.MERGE&&t.id!==a.parents[0]?`M ${e.x} ${e.y} L ${e.x} ${o.y-$} ${h} ${e.x-l} ${o.y} L ${o.x} ${o.y}`:`M ${e.x} ${e.y} L ${o.x+$} ${e.y} ${s} ${o.x} ${e.y+l} L ${o.x} ${o.y}`),e.x===o.x&&(m=`M ${e.x} ${e.y} L ${o.x} ${o.y}`)):y==="BT"?(e.x<o.x&&(m=a.type===g.MERGE&&t.id!==a.parents[0]?`M ${e.x} ${e.y} L ${e.x} ${o.y+$} ${h} ${e.x+l} ${o.y} L ${o.x} ${o.y}`:`M ${e.x} ${e.y} L ${o.x-$} ${e.y} ${s} ${o.x} ${e.y-l} L ${o.x} ${o.y}`),e.x>o.x&&(s="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",$=20,l=20,m=a.type===g.MERGE&&t.id!==a.parents[0]?`M ${e.x} ${e.y} L ${e.x} ${o.y+$} ${s} ${e.x-l} ${o.y} L ${o.x} ${o.y}`:`M ${e.x} ${e.y} L ${o.x-$} ${e.y} ${s} ${o.x} ${e.y-l} L ${o.x} ${o.y}`),e.x===o.x&&(m=`M ${e.x} ${e.y} L ${o.x} ${o.y}`)):(e.y<o.y&&(m=a.type===g.MERGE&&t.id!==a.parents[0]?`M ${e.x} ${e.y} L ${o.x-$} ${e.y} ${h} ${o.x} ${e.y+l} L ${o.x} ${o.y}`:`M ${e.x} ${e.y} L ${e.x} ${o.y-$} ${s} ${e.x+l} ${o.y} L ${o.x} ${o.y}`),e.y>o.y&&(m=a.type===g.MERGE&&t.id!==a.parents[0]?`M ${e.x} ${e.y} L ${o.x-$} ${e.y} ${s} ${o.x} ${e.y-l} L ${o.x} ${o.y}`:`M ${e.x} ${e.y} L ${e.x} ${o.y+$} ${h} ${e.x+l} ${o.y} L ${o.x} ${o.y}`),e.y===o.y&&(m=`M ${e.x} ${e.y} L ${o.x} ${o.y}`));if(m===void 0)throw Error("Line definition not found");r.append("path").attr("d",m).attr("class","arrow arrow"+p%G)},"drawArrow"),Qt=d((r,t)=>{let a=r.append("g").attr("class","commit-arrows");[...t.keys()].forEach(i=>{let e=t.get(i);e.parents&&e.parents.length>0&&e.parents.forEach(o=>{Jt(a,t.get(o),e,t)})})},"drawArrows"),Xt=d((r,t)=>{let a=r.append("g");t.forEach((i,e)=>{var x;let o=e%G,c=(x=E.get(i.name))==null?void 0:x.pos;if(c===void 0)throw Error(`Position not found for branch ${i.name}`);let s=a.append("line");s.attr("x1",0),s.attr("y1",c),s.attr("x2",R),s.attr("y2",c),s.attr("class","branch branch"+o),y==="TB"?(s.attr("y1",H),s.attr("x1",c),s.attr("y2",R),s.attr("x2",c)):y==="BT"&&(s.attr("y1",R),s.attr("x1",c),s.attr("y2",H),s.attr("x2",c)),S.push(c);let h=i.name,$=Y(h),l=a.insert("rect"),p=a.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+o);p.node().appendChild($);let m=$.getBBox();l.attr("class","branchLabelBkg label"+o).attr("rx",4).attr("ry",4).attr("x",-m.width-4-((f==null?void 0:f.rotateCommitLabel)===!0?30:0)).attr("y",-m.height/2+8).attr("width",m.width+18).attr("height",m.height+4),p.attr("transform","translate("+(-m.width-14-((f==null?void 0:f.rotateCommitLabel)===!0?30:0))+", "+(c-m.height/2-1)+")"),y==="TB"?(l.attr("x",c-m.width/2-10).attr("y",0),p.attr("transform","translate("+(c-m.width/2-5)+", 0)")):y==="BT"?(l.attr("x",c-m.width/2-10).attr("y",R),p.attr("transform","translate("+(c-m.width/2-5)+", "+R+")")):l.attr("transform","translate(-19, "+(c-m.height/2)+")")})},"drawBranches"),Zt=d(function(r,t,a,i,e){return E.set(r,{pos:t,index:a}),t+=50+(e?40:0)+(y==="TB"||y==="BT"?i.width/2:0),t},"setBranchPosition"),tr={parser:It,db:F,renderer:{draw:d(function(r,t,a,i){if(qt(),u.debug("in gitgraph renderer",r+`
`,"id:",t,a),!f)throw Error("GitGraph config not found");let e=f.rotateCommitLabel??!1,o=i.db;I=o.getCommits();let c=o.getBranchesAsObjArray();y=o.getDirection();let s=Q(`[id="${t}"]`),h=0;c.forEach(($,l)=>{var O;let p=Y($.name),m=s.append("g"),x=m.insert("g").attr("class","branchLabel"),b=x.insert("g").attr("class","label branch-label");(O=b.node())==null||O.appendChild(p);let w=p.getBBox();h=Zt($.name,h,l,w,e),b.remove(),x.remove(),m.remove()}),V(s,I,!1),f.showBranches&&Xt(s,c),Qt(s,I),V(s,I,!0),X.insertTitle(s,"gitTitleText",f.titleTopMargin??0,o.getDiagramTitle()),at(void 0,s,f.diagramPadding,f.useMaxWidth)},"draw")},styles:d(r=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(t=>`
        .branch-label${t} { fill: ${r["gitBranchLabel"+t]}; }
        .commit${t} { stroke: ${r["git"+t]}; fill: ${r["git"+t]}; }
        .commit-highlight${t} { stroke: ${r["gitInv"+t]}; fill: ${r["gitInv"+t]}; }
        .label${t}  { fill: ${r["git"+t]}; }
        .arrow${t} { stroke: ${r["git"+t]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${r.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelColor};}
  .commit-label-bkg { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${r.tagLabelFontSize}; fill: ${r.tagLabelColor};}
  .tag-label-bkg { fill: ${r.tagLabelBackground}; stroke: ${r.tagLabelBorder}; }
  .tag-hole { fill: ${r.textColor}; }

  .commit-merge {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
  }
  .commit-reverse {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${r.textColor};
  }
`,"getStyles")};export{tr as diagram};
